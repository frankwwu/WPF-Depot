@page "/weather"
@using System.Globalization

<PageTitle>Weather</PageTitle>

<h1>Weather Forecast</h1>

<p>This component demonstrates more Blazor features.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="mb-3">
        <input type="text" class="form-control" placeholder="Search by summary..."
               @bind="searchText" />
    </div>

    <table class="table table-hover">
        <thead>
            <tr>
                <th @onclick="() => SortByDate()">Date ??</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in FilteredForecasts)
            {
                <tr class="@GetRowClass(forecast)">
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>
                        <span class="badge @GetBadgeClass(forecast)">
                            @forecast.Summary
                        </span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private string searchText = "";
    private bool sortAsc = true;

    private IEnumerable<WeatherForecast> FilteredForecasts =>
        string.IsNullOrWhiteSpace(searchText)
            ? forecasts!
            : forecasts!.Where(f => f.Summary.Contains(searchText, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000); // Simulate async load
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
        {
            Date = DateTime.Now.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 40),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private void SortByDate()
    {
        if (sortAsc)
            forecasts = forecasts!.OrderBy(f => f.Date).ToArray();
        else
            forecasts = forecasts!.OrderByDescending(f => f.Date).ToArray();

        sortAsc = !sortAsc;
    }

    private string GetRowClass(WeatherForecast forecast) =>
        forecast.TemperatureC switch
        {
            > 30 => "table-danger",
            < 0 => "table-info",
            _ => ""
        };

    private string GetBadgeClass(WeatherForecast forecast) =>
        forecast.Summary switch
        {
            "Hot" => "bg-danger",
            "Mild" => "bg-warning text-dark",
            "Cool" => "bg-info text-dark",
            _ => "bg-secondary"
        };

    private string[] summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild",
        "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };

    private class WeatherForecast
    {
        public DateTime Date { get; set; }
        public int TemperatureC { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
        public string Summary { get; set; } = "";
    }
}
